name: CI

on: push

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

  build:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

      - name: build
        run: make build_package -j
        working-directory: ./packages/linkplaces
        env:
          CI: true

  build_by_esbuild:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

      - name: build
        run: make build_package -j USE_ESBUILD=1
        working-directory: ./packages/linkplaces
        env:
          CI: true

  lint:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

      - name: Lint
        run: make lint -j
        env:
          CI: true

  check_type_integrity:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

      - name: typecheck
        run: make typecheck -j
        env:
          CI: true

  check_formatting:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

      - name: check formatting
        run: make check_format -j
        env:
          CI: true

  unittest:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    steps:
      ##### BEGIN: sharable parts across jobs #####
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .yarn/cache/
          key: build-v1-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Setup corepack to use yarnpkg
        run: |
          make setup_yarnpkg
      - name: install dependencies
        # We only cache `yarn cache dir`, not including `node_modules/`.
        # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          make install
      ##### END: sharable parts across jobs #####

      - name: Run unittests
        run: make unittest -j
        working-directory: ./packages/linkplaces
        env:
          CI: true
